// Code generated by MockGen. DO NOT EDIT.
// Source: shutdown/shutdownHandler.go

// Package mock_shutdown is a generated GoMock package.
package mock_shutdown

import (
	reflect "reflect"

	shutdown "github.com/ThomasObenaus/go-base/shutdown"
	gomock "github.com/golang/mock/gomock"
)

// MockShutdownHandler is a mock of ShutdownHandler interface.
type MockShutdownHandler struct {
	ctrl     *gomock.Controller
	recorder *MockShutdownHandlerMockRecorder
}

// MockShutdownHandlerMockRecorder is the mock recorder for MockShutdownHandler.
type MockShutdownHandlerMockRecorder struct {
	mock *MockShutdownHandler
}

// NewMockShutdownHandler creates a new mock instance.
func NewMockShutdownHandler(ctrl *gomock.Controller) *MockShutdownHandler {
	mock := &MockShutdownHandler{ctrl: ctrl}
	mock.recorder = &MockShutdownHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShutdownHandler) EXPECT() *MockShutdownHandlerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockShutdownHandler) Register(stoppable shutdown.Stopable, front ...bool) {
	m.ctrl.T.Helper()
	varargs := []interface{}{stoppable}
	for _, a := range front {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Register", varargs...)
}

// Register indicates an expected call of Register.
func (mr *MockShutdownHandlerMockRecorder) Register(stoppable interface{}, front ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stoppable}, front...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockShutdownHandler)(nil).Register), varargs...)
}

// WaitUntilSignal mocks base method.
func (m *MockShutdownHandler) WaitUntilSignal() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitUntilSignal")
}

// WaitUntilSignal indicates an expected call of WaitUntilSignal.
func (mr *MockShutdownHandlerMockRecorder) WaitUntilSignal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilSignal", reflect.TypeOf((*MockShutdownHandler)(nil).WaitUntilSignal))
}
