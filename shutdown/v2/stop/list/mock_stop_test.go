// Code generated by MockGen. DO NOT EDIT.
// Source: shutdown/v2/stop/interfaces.go

// Package list is a generated GoMock package.
package list

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockListener is a mock of Listener interface.
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
}

// MockListenerMockRecorder is the mock recorder for MockListener.
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance.
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListener) EXPECT() *MockListenerMockRecorder {
	return m.recorder
}

// ServiceWasStopped mocks base method.
func (m *MockListener) ServiceWasStopped(name string, err ...error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range err {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ServiceWasStopped", varargs...)
}

// ServiceWasStopped indicates an expected call of ServiceWasStopped.
func (mr *MockListenerMockRecorder) ServiceWasStopped(name interface{}, err ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, err...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceWasStopped", reflect.TypeOf((*MockListener)(nil).ServiceWasStopped), varargs...)
}

// ServiceWillBeStopped mocks base method.
func (m *MockListener) ServiceWillBeStopped(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServiceWillBeStopped", name)
}

// ServiceWillBeStopped indicates an expected call of ServiceWillBeStopped.
func (mr *MockListenerMockRecorder) ServiceWillBeStopped(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceWillBeStopped", reflect.TypeOf((*MockListener)(nil).ServiceWillBeStopped), name)
}

// MockStoppable is a mock of Stoppable interface.
type MockStoppable struct {
	ctrl     *gomock.Controller
	recorder *MockStoppableMockRecorder
}

// MockStoppableMockRecorder is the mock recorder for MockStoppable.
type MockStoppableMockRecorder struct {
	mock *MockStoppable
}

// NewMockStoppable creates a new mock instance.
func NewMockStoppable(ctrl *gomock.Controller) *MockStoppable {
	mock := &MockStoppable{ctrl: ctrl}
	mock.recorder = &MockStoppableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoppable) EXPECT() *MockStoppableMockRecorder {
	return m.recorder
}

// Stop mocks base method.
func (m *MockStoppable) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockStoppableMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStoppable)(nil).Stop))
}

// String mocks base method.
func (m *MockStoppable) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockStoppableMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockStoppable)(nil).String))
}
